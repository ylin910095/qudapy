#include "enum_quda_pybind.hpp"

// Mostly generated by binder, with slight modifications.
void init_enum_quda_pybind(pybind11::module_ &m) {
    //Add submodule
    auto enum_module = m.def_submodule("enum_quda", "Wrapper to enum_quda.h");

	// qudaError_t file:enum_quda.h line:10
	pybind11::enum_<qudaError_t>(enum_module, "qudaError_t")
		.value("QUDA_SUCCESS", QUDA_SUCCESS)
		.value("QUDA_ERROR", QUDA_ERROR)
		.value("QUDA_ERROR_UNINITIALIZED", QUDA_ERROR_UNINITIALIZED)
		.export_values();

;

	// QudaMemoryType_s file:enum_quda.h line:12
	pybind11::enum_<QudaMemoryType>(enum_module, "QudaMemoryType")
		.value("QUDA_MEMORY_DEVICE", QUDA_MEMORY_DEVICE)
		.value("QUDA_MEMORY_PINNED", QUDA_MEMORY_PINNED)
		.value("QUDA_MEMORY_MAPPED", QUDA_MEMORY_MAPPED)
		.value("QUDA_MEMORY_INVALID", QUDA_MEMORY_INVALID)
		.export_values();

;

	// QudaLinkType_s file:enum_quda.h line:23
	pybind11::enum_<QudaLinkType>(enum_module, "QudaLinkType")
		.value("QUDA_SU3_LINKS", QUDA_SU3_LINKS)
		.value("QUDA_GENERAL_LINKS", QUDA_GENERAL_LINKS)
		.value("QUDA_THREE_LINKS", QUDA_THREE_LINKS)
		.value("QUDA_MOMENTUM_LINKS", QUDA_MOMENTUM_LINKS)
		.value("QUDA_COARSE_LINKS", QUDA_COARSE_LINKS)
		.value("QUDA_SMEARED_LINKS", QUDA_SMEARED_LINKS)
		.value("QUDA_WILSON_LINKS", QUDA_WILSON_LINKS)
		.value("QUDA_ASQTAD_FAT_LINKS", QUDA_ASQTAD_FAT_LINKS)
		.value("QUDA_ASQTAD_LONG_LINKS", QUDA_ASQTAD_LONG_LINKS)
		.value("QUDA_ASQTAD_MOM_LINKS", QUDA_ASQTAD_MOM_LINKS)
		.value("QUDA_ASQTAD_GENERAL_LINKS", QUDA_ASQTAD_GENERAL_LINKS)
		.value("QUDA_INVALID_LINKS", QUDA_INVALID_LINKS)
		.export_values();

;

	// QudaGaugeFieldOrder_s file:enum_quda.h line:38
	pybind11::enum_<QudaGaugeFieldOrder>(enum_module, "QudaGaugeFieldOrder")
		.value("QUDA_FLOAT_GAUGE_ORDER", QUDA_FLOAT_GAUGE_ORDER)
		.value("QUDA_FLOAT2_GAUGE_ORDER", QUDA_FLOAT2_GAUGE_ORDER)
		.value("QUDA_FLOAT4_GAUGE_ORDER", QUDA_FLOAT4_GAUGE_ORDER)
		.value("QUDA_FLOAT8_GAUGE_ORDER", QUDA_FLOAT8_GAUGE_ORDER)
		.value("QUDA_NATIVE_GAUGE_ORDER", QUDA_NATIVE_GAUGE_ORDER)
		.value("QUDA_QDP_GAUGE_ORDER", QUDA_QDP_GAUGE_ORDER)
		.value("QUDA_QDPJIT_GAUGE_ORDER", QUDA_QDPJIT_GAUGE_ORDER)
		.value("QUDA_CPS_WILSON_GAUGE_ORDER", QUDA_CPS_WILSON_GAUGE_ORDER)
		.value("QUDA_MILC_GAUGE_ORDER", QUDA_MILC_GAUGE_ORDER)
		.value("QUDA_MILC_SITE_GAUGE_ORDER", QUDA_MILC_SITE_GAUGE_ORDER)
		.value("QUDA_BQCD_GAUGE_ORDER", QUDA_BQCD_GAUGE_ORDER)
		.value("QUDA_TIFR_GAUGE_ORDER", QUDA_TIFR_GAUGE_ORDER)
		.value("QUDA_TIFR_PADDED_GAUGE_ORDER", QUDA_TIFR_PADDED_GAUGE_ORDER)
		.value("QUDA_INVALID_GAUGE_ORDER", QUDA_INVALID_GAUGE_ORDER)
		.export_values();

;

	// QudaTboundary_s file:enum_quda.h line:55
	pybind11::enum_<QudaTboundary>(enum_module, "QudaTboundary")
		.value("QUDA_ANTI_PERIODIC_T", QUDA_ANTI_PERIODIC_T)
		.value("QUDA_PERIODIC_T", QUDA_PERIODIC_T)
		.value("QUDA_INVALID_T_BOUNDARY", QUDA_INVALID_T_BOUNDARY)
		.export_values();

;

	// QudaPrecision_s file:enum_quda.h line:61
	pybind11::enum_<QudaPrecision>(enum_module, "QudaPrecision")
		.value("QUDA_QUARTER_PRECISION", QUDA_QUARTER_PRECISION)
		.value("QUDA_HALF_PRECISION", QUDA_HALF_PRECISION)
		.value("QUDA_SINGLE_PRECISION", QUDA_SINGLE_PRECISION)
		.value("QUDA_DOUBLE_PRECISION", QUDA_DOUBLE_PRECISION)
		.value("QUDA_INVALID_PRECISION", QUDA_INVALID_PRECISION)
		.export_values();

;

	// QudaReconstructType_s file:enum_quda.h line:69
	pybind11::enum_<QudaReconstructType>(enum_module, "QudaReconstructType")
		.value("QUDA_RECONSTRUCT_NO", QUDA_RECONSTRUCT_NO)
		.value("QUDA_RECONSTRUCT_12", QUDA_RECONSTRUCT_12)
		.value("QUDA_RECONSTRUCT_8", QUDA_RECONSTRUCT_8)
		.value("QUDA_RECONSTRUCT_9", QUDA_RECONSTRUCT_9)
		.value("QUDA_RECONSTRUCT_13", QUDA_RECONSTRUCT_13)
		.value("QUDA_RECONSTRUCT_10", QUDA_RECONSTRUCT_10)
		.value("QUDA_RECONSTRUCT_INVALID", QUDA_RECONSTRUCT_INVALID)
		.export_values();

;

	// QudaGaugeFixed_s file:enum_quda.h line:79
	pybind11::enum_<QudaGaugeFixed>(enum_module, "QudaGaugeFixed")
		.value("QUDA_GAUGE_FIXED_NO", QUDA_GAUGE_FIXED_NO)
		.value("QUDA_GAUGE_FIXED_YES", QUDA_GAUGE_FIXED_YES)
		.value("QUDA_GAUGE_FIXED_INVALID", QUDA_GAUGE_FIXED_INVALID)
		.export_values();

;

	// QudaDslashType_s file:enum_quda.h line:89
	pybind11::enum_<QudaDslashType>(enum_module, "QudaDslashType")
		.value("QUDA_WILSON_DSLASH", QUDA_WILSON_DSLASH)
		.value("QUDA_CLOVER_WILSON_DSLASH", QUDA_CLOVER_WILSON_DSLASH)
		.value("QUDA_CLOVER_HASENBUSCH_TWIST_DSLASH", QUDA_CLOVER_HASENBUSCH_TWIST_DSLASH)
		.value("QUDA_DOMAIN_WALL_DSLASH", QUDA_DOMAIN_WALL_DSLASH)
		.value("QUDA_DOMAIN_WALL_4D_DSLASH", QUDA_DOMAIN_WALL_4D_DSLASH)
		.value("QUDA_MOBIUS_DWF_DSLASH", QUDA_MOBIUS_DWF_DSLASH)
		.value("QUDA_MOBIUS_DWF_EOFA_DSLASH", QUDA_MOBIUS_DWF_EOFA_DSLASH)
		.value("QUDA_STAGGERED_DSLASH", QUDA_STAGGERED_DSLASH)
		.value("QUDA_ASQTAD_DSLASH", QUDA_ASQTAD_DSLASH)
		.value("QUDA_TWISTED_MASS_DSLASH", QUDA_TWISTED_MASS_DSLASH)
		.value("QUDA_TWISTED_CLOVER_DSLASH", QUDA_TWISTED_CLOVER_DSLASH)
		.value("QUDA_LAPLACE_DSLASH", QUDA_LAPLACE_DSLASH)
		.value("QUDA_COVDEV_DSLASH", QUDA_COVDEV_DSLASH)
		.value("QUDA_INVALID_DSLASH", QUDA_INVALID_DSLASH)
		.export_values();

;

	// QudaInverterType_s file:enum_quda.h line:106
	pybind11::enum_<QudaInverterType>(enum_module, "QudaInverterType")
		.value("QUDA_CG_INVERTER", QUDA_CG_INVERTER)
		.value("QUDA_BICGSTAB_INVERTER", QUDA_BICGSTAB_INVERTER)
		.value("QUDA_GCR_INVERTER", QUDA_GCR_INVERTER)
		.value("QUDA_MR_INVERTER", QUDA_MR_INVERTER)
		.value("QUDA_MPBICGSTAB_INVERTER", QUDA_MPBICGSTAB_INVERTER)
		.value("QUDA_SD_INVERTER", QUDA_SD_INVERTER)
		.value("QUDA_XSD_INVERTER", QUDA_XSD_INVERTER)
		.value("QUDA_PCG_INVERTER", QUDA_PCG_INVERTER)
		.value("QUDA_MPCG_INVERTER", QUDA_MPCG_INVERTER)
		.value("QUDA_EIGCG_INVERTER", QUDA_EIGCG_INVERTER)
		.value("QUDA_INC_EIGCG_INVERTER", QUDA_INC_EIGCG_INVERTER)
		.value("QUDA_GMRESDR_INVERTER", QUDA_GMRESDR_INVERTER)
		.value("QUDA_GMRESDR_PROJ_INVERTER", QUDA_GMRESDR_PROJ_INVERTER)
		.value("QUDA_GMRESDR_SH_INVERTER", QUDA_GMRESDR_SH_INVERTER)
		.value("QUDA_FGMRESDR_INVERTER", QUDA_FGMRESDR_INVERTER)
		.value("QUDA_MG_INVERTER", QUDA_MG_INVERTER)
		.value("QUDA_BICGSTABL_INVERTER", QUDA_BICGSTABL_INVERTER)
		.value("QUDA_CGNE_INVERTER", QUDA_CGNE_INVERTER)
		.value("QUDA_CGNR_INVERTER", QUDA_CGNR_INVERTER)
		.value("QUDA_CG3_INVERTER", QUDA_CG3_INVERTER)
		.value("QUDA_CG3NE_INVERTER", QUDA_CG3NE_INVERTER)
		.value("QUDA_CG3NR_INVERTER", QUDA_CG3NR_INVERTER)
		.value("QUDA_CA_CG_INVERTER", QUDA_CA_CG_INVERTER)
		.value("QUDA_CA_CGNE_INVERTER", QUDA_CA_CGNE_INVERTER)
		.value("QUDA_CA_CGNR_INVERTER", QUDA_CA_CGNR_INVERTER)
		.value("QUDA_CA_GCR_INVERTER", QUDA_CA_GCR_INVERTER)
		.value("QUDA_INVALID_INVERTER", QUDA_INVALID_INVERTER)
		.export_values();

;

	// QudaEigType_s file:enum_quda.h line:136
	pybind11::enum_<QudaEigType>(enum_module, "QudaEigType")
		.value("QUDA_EIG_TR_LANCZOS", QUDA_EIG_TR_LANCZOS)
		.value("QUDA_EIG_BLK_TR_LANCZOS", QUDA_EIG_BLK_TR_LANCZOS)
		.value("QUDA_EIG_IR_ARNOLDI", QUDA_EIG_IR_ARNOLDI)
		.value("QUDA_EIG_BLK_IR_ARNOLDI", QUDA_EIG_BLK_IR_ARNOLDI)
		.value("QUDA_EIG_INVALID", QUDA_EIG_INVALID)
		.export_values();

;

	// QudaEigSpectrumType_s file:enum_quda.h line:146
	pybind11::enum_<QudaEigSpectrumType>(enum_module, "QudaEigSpectrumType", pybind11::arithmetic(), "S=smallest L=largest\n    R=real M=modulus I=imaniary *")
		.value("QUDA_SPECTRUM_LM_EIG", QUDA_SPECTRUM_LM_EIG)
		.value("QUDA_SPECTRUM_SM_EIG", QUDA_SPECTRUM_SM_EIG)
		.value("QUDA_SPECTRUM_LR_EIG", QUDA_SPECTRUM_LR_EIG)
		.value("QUDA_SPECTRUM_SR_EIG", QUDA_SPECTRUM_SR_EIG)
		.value("QUDA_SPECTRUM_LI_EIG", QUDA_SPECTRUM_LI_EIG)
		.value("QUDA_SPECTRUM_SI_EIG", QUDA_SPECTRUM_SI_EIG)
		.value("QUDA_SPECTRUM_INVALID", QUDA_SPECTRUM_INVALID)
		.export_values();

;

	// QudaSolutionType_s file:enum_quda.h line:156
	pybind11::enum_<QudaSolutionType>(enum_module, "QudaSolutionType")
		.value("QUDA_MAT_SOLUTION", QUDA_MAT_SOLUTION)
		.value("QUDA_MATDAG_MAT_SOLUTION", QUDA_MATDAG_MAT_SOLUTION)
		.value("QUDA_MATPC_SOLUTION", QUDA_MATPC_SOLUTION)
		.value("QUDA_MATPC_DAG_SOLUTION", QUDA_MATPC_DAG_SOLUTION)
		.value("QUDA_MATPCDAG_MATPC_SOLUTION", QUDA_MATPCDAG_MATPC_SOLUTION)
		.value("QUDA_MATPCDAG_MATPC_SHIFT_SOLUTION", QUDA_MATPCDAG_MATPC_SHIFT_SOLUTION)
		.value("QUDA_INVALID_SOLUTION", QUDA_INVALID_SOLUTION)
		.export_values();

;

	// QudaSolveType_s file:enum_quda.h line:166
	pybind11::enum_<QudaSolveType>(enum_module, "QudaSolveType")
		.value("QUDA_DIRECT_SOLVE", QUDA_DIRECT_SOLVE)
		.value("QUDA_NORMOP_SOLVE", QUDA_NORMOP_SOLVE)
		.value("QUDA_DIRECT_PC_SOLVE", QUDA_DIRECT_PC_SOLVE)
		.value("QUDA_NORMOP_PC_SOLVE", QUDA_NORMOP_PC_SOLVE)
		.value("QUDA_NORMERR_SOLVE", QUDA_NORMERR_SOLVE)
		.value("QUDA_NORMERR_PC_SOLVE", QUDA_NORMERR_PC_SOLVE)
		.value("QUDA_NORMEQ_SOLVE", QUDA_NORMEQ_SOLVE)
		.value("QUDA_NORMEQ_PC_SOLVE", QUDA_NORMEQ_PC_SOLVE)
		.value("QUDA_INVALID_SOLVE", QUDA_INVALID_SOLVE)
		.export_values();

;

	// QudaMultigridCycleType_s file:enum_quda.h line:178
	pybind11::enum_<QudaMultigridCycleType>(enum_module, "QudaMultigridCycleType")
		.value("QUDA_MG_CYCLE_VCYCLE", QUDA_MG_CYCLE_VCYCLE)
		.value("QUDA_MG_CYCLE_FCYCLE", QUDA_MG_CYCLE_FCYCLE)
		.value("QUDA_MG_CYCLE_WCYCLE", QUDA_MG_CYCLE_WCYCLE)
		.value("QUDA_MG_CYCLE_RECURSIVE", QUDA_MG_CYCLE_RECURSIVE)
		.value("QUDA_MG_CYCLE_INVALID", QUDA_MG_CYCLE_INVALID)
		.export_values();

;

	// QudaSchwarzType_s file:enum_quda.h line:186
	pybind11::enum_<QudaSchwarzType>(enum_module, "QudaSchwarzType")
		.value("QUDA_ADDITIVE_SCHWARZ", QUDA_ADDITIVE_SCHWARZ)
		.value("QUDA_MULTIPLICATIVE_SCHWARZ", QUDA_MULTIPLICATIVE_SCHWARZ)
		.value("QUDA_INVALID_SCHWARZ", QUDA_INVALID_SCHWARZ)
		.export_values();

;

	// QudaResidualType_s file:enum_quda.h line:192
	pybind11::enum_<QudaResidualType>(enum_module, "QudaResidualType")
		.value("QUDA_L2_RELATIVE_RESIDUAL", QUDA_L2_RELATIVE_RESIDUAL)
		.value("QUDA_L2_ABSOLUTE_RESIDUAL", QUDA_L2_ABSOLUTE_RESIDUAL)
		.value("QUDA_HEAVY_QUARK_RESIDUAL", QUDA_HEAVY_QUARK_RESIDUAL)
		.value("QUDA_INVALID_RESIDUAL", QUDA_INVALID_RESIDUAL)
		.export_values();

;

	// QudaCABasis_s file:enum_quda.h line:200
	pybind11::enum_<QudaCABasis>(enum_module, "QudaCABasis")
		.value("QUDA_POWER_BASIS", QUDA_POWER_BASIS)
		.value("QUDA_CHEBYSHEV_BASIS", QUDA_CHEBYSHEV_BASIS)
		.value("QUDA_INVALID_BASIS", QUDA_INVALID_BASIS)
		.export_values();

;

	// QudaMatPCType_s file:enum_quda.h line:215
	pybind11::enum_<QudaMatPCType>(enum_module, "QudaMatPCType")
		.value("QUDA_MATPC_EVEN_EVEN", QUDA_MATPC_EVEN_EVEN)
		.value("QUDA_MATPC_ODD_ODD", QUDA_MATPC_ODD_ODD)
		.value("QUDA_MATPC_EVEN_EVEN_ASYMMETRIC", QUDA_MATPC_EVEN_EVEN_ASYMMETRIC)
		.value("QUDA_MATPC_ODD_ODD_ASYMMETRIC", QUDA_MATPC_ODD_ODD_ASYMMETRIC)
		.value("QUDA_MATPC_INVALID", QUDA_MATPC_INVALID)
		.export_values();

;

	// QudaDagType_s file:enum_quda.h line:223
	pybind11::enum_<QudaDagType>(enum_module, "QudaDagType")
		.value("QUDA_DAG_NO", QUDA_DAG_NO)
		.value("QUDA_DAG_YES", QUDA_DAG_YES)
		.value("QUDA_DAG_INVALID", QUDA_DAG_INVALID)
		.export_values();

;

	// QudaMassNormalization_s file:enum_quda.h line:225
	pybind11::enum_<QudaMassNormalization>(enum_module, "QudaMassNormalization")
		.value("QUDA_KAPPA_NORMALIZATION", QUDA_KAPPA_NORMALIZATION)
		.value("QUDA_MASS_NORMALIZATION", QUDA_MASS_NORMALIZATION)
		.value("QUDA_ASYMMETRIC_MASS_NORMALIZATION", QUDA_ASYMMETRIC_MASS_NORMALIZATION)
		.value("QUDA_INVALID_NORMALIZATION", QUDA_INVALID_NORMALIZATION)
		.export_values();

;

	// QudaSolverNormalization_s file:enum_quda.h line:232
	pybind11::enum_<QudaSolverNormalization>(enum_module, "QudaSolverNormalization")
		.value("QUDA_DEFAULT_NORMALIZATION", QUDA_DEFAULT_NORMALIZATION)
		.value("QUDA_SOURCE_NORMALIZATION", QUDA_SOURCE_NORMALIZATION)
		.export_values();

;

	// QudaPreserveSource_s file:enum_quda.h line:237
	pybind11::enum_<QudaPreserveSource>(enum_module, "QudaPreserveSource")
		.value("QUDA_PRESERVE_SOURCE_NO", QUDA_PRESERVE_SOURCE_NO)
		.value("QUDA_PRESERVE_SOURCE_YES", QUDA_PRESERVE_SOURCE_YES)
		.value("QUDA_PRESERVE_SOURCE_INVALID", QUDA_PRESERVE_SOURCE_INVALID)
		.export_values();

;

	// QudaDiracFieldOrder_s file:enum_quda.h line:243
	pybind11::enum_<QudaDiracFieldOrder>(enum_module, "QudaDiracFieldOrder")
		.value("QUDA_INTERNAL_DIRAC_ORDER", QUDA_INTERNAL_DIRAC_ORDER)
		.value("QUDA_DIRAC_ORDER", QUDA_DIRAC_ORDER)
		.value("QUDA_QDP_DIRAC_ORDER", QUDA_QDP_DIRAC_ORDER)
		.value("QUDA_QDPJIT_DIRAC_ORDER", QUDA_QDPJIT_DIRAC_ORDER)
		.value("QUDA_CPS_WILSON_DIRAC_ORDER", QUDA_CPS_WILSON_DIRAC_ORDER)
		.value("QUDA_LEX_DIRAC_ORDER", QUDA_LEX_DIRAC_ORDER)
		.value("QUDA_TIFR_PADDED_DIRAC_ORDER", QUDA_TIFR_PADDED_DIRAC_ORDER)
		.value("QUDA_INVALID_DIRAC_ORDER", QUDA_INVALID_DIRAC_ORDER)
		.export_values();

;

	// QudaCloverFieldOrder_s file:enum_quda.h line:254
	pybind11::enum_<QudaCloverFieldOrder>(enum_module, "QudaCloverFieldOrder")
		.value("QUDA_FLOAT_CLOVER_ORDER", QUDA_FLOAT_CLOVER_ORDER)
		.value("QUDA_FLOAT2_CLOVER_ORDER", QUDA_FLOAT2_CLOVER_ORDER)
		.value("QUDA_FLOAT4_CLOVER_ORDER", QUDA_FLOAT4_CLOVER_ORDER)
		.value("QUDA_PACKED_CLOVER_ORDER", QUDA_PACKED_CLOVER_ORDER)
		.value("QUDA_QDPJIT_CLOVER_ORDER", QUDA_QDPJIT_CLOVER_ORDER)
		.value("QUDA_BQCD_CLOVER_ORDER", QUDA_BQCD_CLOVER_ORDER)
		.value("QUDA_INVALID_CLOVER_ORDER", QUDA_INVALID_CLOVER_ORDER)
		.export_values();

;

	// QudaVerbosity_s file:enum_quda.h line:264
	pybind11::enum_<QudaVerbosity>(enum_module, "QudaVerbosity")
		.value("QUDA_SILENT", QUDA_SILENT)
		.value("QUDA_SUMMARIZE", QUDA_SUMMARIZE)
		.value("QUDA_VERBOSE", QUDA_VERBOSE)
		.value("QUDA_DEBUG_VERBOSE", QUDA_DEBUG_VERBOSE)
		.value("QUDA_INVALID_VERBOSITY", QUDA_INVALID_VERBOSITY)
		.export_values();

;

	// QudaTune_s file:enum_quda.h line:272
	pybind11::enum_<QudaTune>(enum_module, "QudaTune")
		.value("QUDA_TUNE_NO", QUDA_TUNE_NO)
		.value("QUDA_TUNE_YES", QUDA_TUNE_YES)
		.value("QUDA_TUNE_INVALID", QUDA_TUNE_INVALID)
		.export_values();

;

	// QudaPreserveDirac_s file:enum_quda.h line:274
	pybind11::enum_<QudaPreserveDirac>(enum_module, "QudaPreserveDirac")
		.value("QUDA_PRESERVE_DIRAC_NO", QUDA_PRESERVE_DIRAC_NO)
		.value("QUDA_PRESERVE_DIRAC_YES", QUDA_PRESERVE_DIRAC_YES)
		.value("QUDA_PRESERVE_DIRAC_INVALID", QUDA_PRESERVE_DIRAC_INVALID)
		.export_values();

;

	// QudaParity_s file:enum_quda.h line:284
	pybind11::enum_<QudaParity>(enum_module, "QudaParity")
		.value("QUDA_EVEN_PARITY", QUDA_EVEN_PARITY)
		.value("QUDA_ODD_PARITY", QUDA_ODD_PARITY)
		.value("QUDA_INVALID_PARITY", QUDA_INVALID_PARITY)
		.export_values();

;

	// QudaDiracType_s file:enum_quda.h line:290
	pybind11::enum_<QudaDiracType>(enum_module, "QudaDiracType")
		.value("QUDA_WILSON_DIRAC", QUDA_WILSON_DIRAC)
		.value("QUDA_WILSONPC_DIRAC", QUDA_WILSONPC_DIRAC)
		.value("QUDA_CLOVER_DIRAC", QUDA_CLOVER_DIRAC)
		.value("QUDA_CLOVERPC_DIRAC", QUDA_CLOVERPC_DIRAC)
		.value("QUDA_CLOVER_HASENBUSCH_TWIST_DIRAC", QUDA_CLOVER_HASENBUSCH_TWIST_DIRAC)
		.value("QUDA_CLOVER_HASENBUSCH_TWISTPC_DIRAC", QUDA_CLOVER_HASENBUSCH_TWISTPC_DIRAC)
		.value("QUDA_DOMAIN_WALL_DIRAC", QUDA_DOMAIN_WALL_DIRAC)
		.value("QUDA_DOMAIN_WALLPC_DIRAC", QUDA_DOMAIN_WALLPC_DIRAC)
		.value("QUDA_DOMAIN_WALL_4D_DIRAC", QUDA_DOMAIN_WALL_4D_DIRAC)
		.value("QUDA_DOMAIN_WALL_4DPC_DIRAC", QUDA_DOMAIN_WALL_4DPC_DIRAC)
		.value("QUDA_MOBIUS_DOMAIN_WALL_DIRAC", QUDA_MOBIUS_DOMAIN_WALL_DIRAC)
		.value("QUDA_MOBIUS_DOMAIN_WALLPC_DIRAC", QUDA_MOBIUS_DOMAIN_WALLPC_DIRAC)
		.value("QUDA_MOBIUS_DOMAIN_WALL_EOFA_DIRAC", QUDA_MOBIUS_DOMAIN_WALL_EOFA_DIRAC)
		.value("QUDA_MOBIUS_DOMAIN_WALLPC_EOFA_DIRAC", QUDA_MOBIUS_DOMAIN_WALLPC_EOFA_DIRAC)
		.value("QUDA_STAGGERED_DIRAC", QUDA_STAGGERED_DIRAC)
		.value("QUDA_STAGGEREDPC_DIRAC", QUDA_STAGGEREDPC_DIRAC)
		.value("QUDA_STAGGEREDKD_DIRAC", QUDA_STAGGEREDKD_DIRAC)
		.value("QUDA_ASQTAD_DIRAC", QUDA_ASQTAD_DIRAC)
		.value("QUDA_ASQTADPC_DIRAC", QUDA_ASQTADPC_DIRAC)
		.value("QUDA_ASQTADKD_DIRAC", QUDA_ASQTADKD_DIRAC)
		.value("QUDA_TWISTED_MASS_DIRAC", QUDA_TWISTED_MASS_DIRAC)
		.value("QUDA_TWISTED_MASSPC_DIRAC", QUDA_TWISTED_MASSPC_DIRAC)
		.value("QUDA_TWISTED_CLOVER_DIRAC", QUDA_TWISTED_CLOVER_DIRAC)
		.value("QUDA_TWISTED_CLOVERPC_DIRAC", QUDA_TWISTED_CLOVERPC_DIRAC)
		.value("QUDA_COARSE_DIRAC", QUDA_COARSE_DIRAC)
		.value("QUDA_COARSEPC_DIRAC", QUDA_COARSEPC_DIRAC)
		.value("QUDA_GAUGE_LAPLACE_DIRAC", QUDA_GAUGE_LAPLACE_DIRAC)
		.value("QUDA_GAUGE_LAPLACEPC_DIRAC", QUDA_GAUGE_LAPLACEPC_DIRAC)
		.value("QUDA_GAUGE_COVDEV_DIRAC", QUDA_GAUGE_COVDEV_DIRAC)
		.value("QUDA_INVALID_DIRAC", QUDA_INVALID_DIRAC)
		.export_values();

	// QudaFieldLocation_s file:enum_quda.h line:324
	pybind11::enum_<QudaFieldLocation>(enum_module, "QudaFieldLocation")
		.value("QUDA_CPU_FIELD_LOCATION", QUDA_CPU_FIELD_LOCATION)
		.value("QUDA_CUDA_FIELD_LOCATION", QUDA_CUDA_FIELD_LOCATION)
		.value("QUDA_INVALID_FIELD_LOCATION", QUDA_INVALID_FIELD_LOCATION)
		.export_values();

;

	// QudaSiteSubset_s file:enum_quda.h line:331
	pybind11::enum_<QudaSiteSubset>(enum_module, "QudaSiteSubset")
		.value("QUDA_PARITY_SITE_SUBSET", QUDA_PARITY_SITE_SUBSET)
		.value("QUDA_FULL_SITE_SUBSET", QUDA_FULL_SITE_SUBSET)
		.value("QUDA_INVALID_SITE_SUBSET", QUDA_INVALID_SITE_SUBSET)
		.export_values();

;

	// QudaSiteOrder_s file:enum_quda.h line:338
	pybind11::enum_<QudaSiteOrder>(enum_module, "QudaSiteOrder")
		.value("QUDA_LEXICOGRAPHIC_SITE_ORDER", QUDA_LEXICOGRAPHIC_SITE_ORDER)
		.value("QUDA_EVEN_ODD_SITE_ORDER", QUDA_EVEN_ODD_SITE_ORDER)
		.value("QUDA_ODD_EVEN_SITE_ORDER", QUDA_ODD_EVEN_SITE_ORDER)
		.value("QUDA_INVALID_SITE_ORDER", QUDA_INVALID_SITE_ORDER)
		.export_values();

;

	// QudaFieldOrder_s file:enum_quda.h line:346
	pybind11::enum_<QudaFieldOrder>(enum_module, "QudaFieldOrder")
		.value("QUDA_FLOAT_FIELD_ORDER", QUDA_FLOAT_FIELD_ORDER)
		.value("QUDA_FLOAT2_FIELD_ORDER", QUDA_FLOAT2_FIELD_ORDER)
		.value("QUDA_FLOAT4_FIELD_ORDER", QUDA_FLOAT4_FIELD_ORDER)
		.value("QUDA_FLOAT8_FIELD_ORDER", QUDA_FLOAT8_FIELD_ORDER)
		.value("QUDA_SPACE_SPIN_COLOR_FIELD_ORDER", QUDA_SPACE_SPIN_COLOR_FIELD_ORDER)
		.value("QUDA_SPACE_COLOR_SPIN_FIELD_ORDER", QUDA_SPACE_COLOR_SPIN_FIELD_ORDER)
		.value("QUDA_QDPJIT_FIELD_ORDER", QUDA_QDPJIT_FIELD_ORDER)
		.value("QUDA_QOP_DOMAIN_WALL_FIELD_ORDER", QUDA_QOP_DOMAIN_WALL_FIELD_ORDER)
		.value("QUDA_PADDED_SPACE_SPIN_COLOR_FIELD_ORDER", QUDA_PADDED_SPACE_SPIN_COLOR_FIELD_ORDER)
		.value("QUDA_INVALID_FIELD_ORDER", QUDA_INVALID_FIELD_ORDER)
		.export_values();

;

	// QudaFieldCreate_s file:enum_quda.h line:359
	pybind11::enum_<QudaFieldCreate>(enum_module, "QudaFieldCreate")
		.value("QUDA_NULL_FIELD_CREATE", QUDA_NULL_FIELD_CREATE)
		.value("QUDA_ZERO_FIELD_CREATE", QUDA_ZERO_FIELD_CREATE)
		.value("QUDA_COPY_FIELD_CREATE", QUDA_COPY_FIELD_CREATE)
		.value("QUDA_REFERENCE_FIELD_CREATE", QUDA_REFERENCE_FIELD_CREATE)
		.value("QUDA_INVALID_FIELD_CREATE", QUDA_INVALID_FIELD_CREATE)
		.export_values();

;

	// QudaGammaBasis_s file:enum_quda.h line:367
	pybind11::enum_<QudaGammaBasis>(enum_module, "QudaGammaBasis")
		.value("QUDA_DEGRAND_ROSSI_GAMMA_BASIS", QUDA_DEGRAND_ROSSI_GAMMA_BASIS)
		.value("QUDA_UKQCD_GAMMA_BASIS", QUDA_UKQCD_GAMMA_BASIS)
		.value("QUDA_CHIRAL_GAMMA_BASIS", QUDA_CHIRAL_GAMMA_BASIS)
		.value("QUDA_INVALID_GAMMA_BASIS", QUDA_INVALID_GAMMA_BASIS)
		.export_values();

;

	// QudaSourceType_s file:enum_quda.h line:374
	pybind11::enum_<QudaSourceType>(enum_module, "QudaSourceType")
		.value("QUDA_POINT_SOURCE", QUDA_POINT_SOURCE)
		.value("QUDA_RANDOM_SOURCE", QUDA_RANDOM_SOURCE)
		.value("QUDA_CONSTANT_SOURCE", QUDA_CONSTANT_SOURCE)
		.value("QUDA_SINUSOIDAL_SOURCE", QUDA_SINUSOIDAL_SOURCE)
		.value("QUDA_CORNER_SOURCE", QUDA_CORNER_SOURCE)
		.value("QUDA_INVALID_SOURCE", QUDA_INVALID_SOURCE)
		.export_values();

;

	// QudaNoiseType_s file:enum_quda.h line:383
	pybind11::enum_<QudaNoiseType>(enum_module, "QudaNoiseType")
		.value("QUDA_NOISE_GAUSS", QUDA_NOISE_GAUSS)
		.value("QUDA_NOISE_UNIFORM", QUDA_NOISE_UNIFORM)
		.value("QUDA_NOISE_INVALID", QUDA_NOISE_INVALID)
		.export_values();

;

	// QudaProjectionType_s file:enum_quda.h line:390
	pybind11::enum_<QudaProjectionType>(enum_module, "QudaProjectionType")
		.value("QUDA_MINRES_PROJECTION", QUDA_MINRES_PROJECTION)
		.value("QUDA_GALERKIN_PROJECTION", QUDA_GALERKIN_PROJECTION)
		.value("QUDA_INVALID_PROJECTION", QUDA_INVALID_PROJECTION)
		.export_values();

;

	// QudaPCType_s file:enum_quda.h line:397
	pybind11::enum_<QudaPCType>(enum_module, "QudaPCType")
		.value("QUDA_4D_PC", QUDA_4D_PC)
		.value("QUDA_5D_PC", QUDA_5D_PC)
		.value("QUDA_PC_INVALID", QUDA_PC_INVALID)
		.export_values();

;

	// QudaTwistFlavorType_s file:enum_quda.h line:399
	pybind11::enum_<QudaTwistFlavorType>(enum_module, "QudaTwistFlavorType")
		.value("QUDA_TWIST_SINGLET", QUDA_TWIST_SINGLET)
		.value("QUDA_TWIST_NONDEG_DOUBLET", QUDA_TWIST_NONDEG_DOUBLET)
		.value("QUDA_TWIST_DEG_DOUBLET", QUDA_TWIST_DEG_DOUBLET)
		.value("QUDA_TWIST_NO", QUDA_TWIST_NO)
		.value("QUDA_TWIST_INVALID", QUDA_TWIST_INVALID)
		.export_values();

;

	// QudaTwistDslashType_s file:enum_quda.h line:407
	pybind11::enum_<QudaTwistDslashType>(enum_module, "QudaTwistDslashType")
		.value("QUDA_DEG_TWIST_INV_DSLASH", QUDA_DEG_TWIST_INV_DSLASH)
		.value("QUDA_DEG_DSLASH_TWIST_INV", QUDA_DEG_DSLASH_TWIST_INV)
		.value("QUDA_DEG_DSLASH_TWIST_XPAY", QUDA_DEG_DSLASH_TWIST_XPAY)
		.value("QUDA_NONDEG_DSLASH", QUDA_NONDEG_DSLASH)
		.value("QUDA_DSLASH_INVALID", QUDA_DSLASH_INVALID)
		.export_values();

;

	// QudaTwistCloverDslashType_s file:enum_quda.h line:415
	pybind11::enum_<QudaTwistCloverDslashType>(enum_module, "QudaTwistCloverDslashType")
		.value("QUDA_DEG_CLOVER_TWIST_INV_DSLASH", QUDA_DEG_CLOVER_TWIST_INV_DSLASH)
		.value("QUDA_DEG_DSLASH_CLOVER_TWIST_INV", QUDA_DEG_DSLASH_CLOVER_TWIST_INV)
		.value("QUDA_DEG_DSLASH_CLOVER_TWIST_XPAY", QUDA_DEG_DSLASH_CLOVER_TWIST_XPAY)
		.value("QUDA_TC_DSLASH_INVALID", QUDA_TC_DSLASH_INVALID)
		.export_values();

;

	// QudaTwistGamma5Type_s file:enum_quda.h line:422
	pybind11::enum_<QudaTwistGamma5Type>(enum_module, "QudaTwistGamma5Type")
		.value("QUDA_TWIST_GAMMA5_DIRECT", QUDA_TWIST_GAMMA5_DIRECT)
		.value("QUDA_TWIST_GAMMA5_INVERSE", QUDA_TWIST_GAMMA5_INVERSE)
		.value("QUDA_TWIST_GAMMA5_INVALID", QUDA_TWIST_GAMMA5_INVALID)
		.export_values();

;

	// QudaUseInitGuess_s file:enum_quda.h line:428
	pybind11::enum_<QudaUseInitGuess>(enum_module, "QudaUseInitGuess")
		.value("QUDA_USE_INIT_GUESS_NO", QUDA_USE_INIT_GUESS_NO)
		.value("QUDA_USE_INIT_GUESS_YES", QUDA_USE_INIT_GUESS_YES)
		.value("QUDA_USE_INIT_GUESS_INVALID", QUDA_USE_INIT_GUESS_INVALID)
		.export_values();

;

	// QudaDeflatedGuess_s file:enum_quda.h line:434
	pybind11::enum_<QudaDeflatedGuess>(enum_module, "QudaDeflatedGuess")
		.value("QUDA_DEFLATED_GUESS_NO", QUDA_DEFLATED_GUESS_NO)
		.value("QUDA_DEFLATED_GUESS_YES", QUDA_DEFLATED_GUESS_YES)
		.value("QUDA_DEFLATED_GUESS_INVALID", QUDA_DEFLATED_GUESS_INVALID)
		.export_values();

;

	// QudaComputeNullVector_s file:enum_quda.h line:440
	pybind11::enum_<QudaComputeNullVector>(enum_module, "QudaComputeNullVector")
		.value("QUDA_COMPUTE_NULL_VECTOR_NO", QUDA_COMPUTE_NULL_VECTOR_NO)
		.value("QUDA_COMPUTE_NULL_VECTOR_YES", QUDA_COMPUTE_NULL_VECTOR_YES)
		.value("QUDA_COMPUTE_NULL_VECTOR_INVALID", QUDA_COMPUTE_NULL_VECTOR_INVALID)
		.export_values();

;

	// QudaSetupType_s file:enum_quda.h line:446
	pybind11::enum_<QudaSetupType>(enum_module, "QudaSetupType")
		.value("QUDA_NULL_VECTOR_SETUP", QUDA_NULL_VECTOR_SETUP)
		.value("QUDA_TEST_VECTOR_SETUP", QUDA_TEST_VECTOR_SETUP)
		.value("QUDA_INVALID_SETUP_TYPE", QUDA_INVALID_SETUP_TYPE)
		.export_values();

;

	// QudaTransferType_s file:enum_quda.h line:452
	pybind11::enum_<QudaTransferType>(enum_module, "QudaTransferType")
		.value("QUDA_TRANSFER_AGGREGATE", QUDA_TRANSFER_AGGREGATE)
		.value("QUDA_TRANSFER_COARSE_KD", QUDA_TRANSFER_COARSE_KD)
		.value("QUDA_TRANSFER_OPTIMIZED_KD", QUDA_TRANSFER_OPTIMIZED_KD)
		.value("QUDA_TRANSFER_INVALID", QUDA_TRANSFER_INVALID)
		.export_values();

;

	// QudaBoolean_s file:enum_quda.h line:459
	pybind11::enum_<QudaBoolean>(enum_module, "QudaBoolean")
		.value("QUDA_BOOLEAN_FALSE", QUDA_BOOLEAN_FALSE)
		.value("QUDA_BOOLEAN_TRUE", QUDA_BOOLEAN_TRUE)
		.value("QUDA_BOOLEAN_INVALID", QUDA_BOOLEAN_INVALID)
		.export_values();

;

	// QudaBLASOperation_s file:enum_quda.h line:469
	pybind11::enum_<QudaBLASOperation>(enum_module, "QudaBLASOperation")
		.value("QUDA_BLAS_OP_N", QUDA_BLAS_OP_N)
		.value("QUDA_BLAS_OP_T", QUDA_BLAS_OP_T)
		.value("QUDA_BLAS_OP_C", QUDA_BLAS_OP_C)
		.value("QUDA_BLAS_OP_INVALID", QUDA_BLAS_OP_INVALID)
		.export_values();

;

	// QudaBLASDataType_s file:enum_quda.h line:476
	pybind11::enum_<QudaBLASDataType>(enum_module, "QudaBLASDataType")
		.value("QUDA_BLAS_DATATYPE", QUDA_BLAS_DATATYPE_S)
		.value("QUDA_BLAS_DATATYPE_D", QUDA_BLAS_DATATYPE_D)
		.value("QUDA_BLAS_DATATYPE_C", QUDA_BLAS_DATATYPE_C)
		.value("QUDA_BLAS_DATATYPE_Z", QUDA_BLAS_DATATYPE_Z)
		.value("QUDA_BLAS_DATATYPE_INVALID", QUDA_BLAS_DATATYPE_INVALID)
		.export_values();

;

	// QudaBLASDataOrder_s file:enum_quda.h line:484
	pybind11::enum_<QudaBLASDataOrder>(enum_module, "QudaBLASDataOrder")
		.value("QUDA_BLAS_DATAORDER_ROW", QUDA_BLAS_DATAORDER_ROW)
		.value("QUDA_BLAS_DATAORDER_COL", QUDA_BLAS_DATAORDER_COL)
		.value("QUDA_BLAS_DATAORDER_INVALID", QUDA_BLAS_DATAORDER_INVALID)
		.export_values();

;

	// QudaDirection_s file:enum_quda.h line:490
	pybind11::enum_<QudaDirection>(enum_module, "QudaDirection")
		.value("QUDA_BACKWARDS", QUDA_BACKWARDS)
		.value("QUDA_IN_PLACE", QUDA_IN_PLACE)
		.value("QUDA_FORWARDS", QUDA_FORWARDS)
		.value("QUDA_BOTH_DIRS", QUDA_BOTH_DIRS)
		.export_values();

;

	// QudaLinkDirection_s file:enum_quda.h line:497
	pybind11::enum_<QudaLinkDirection>(enum_module, "QudaLinkDirection")
		.value("QUDA_LINK_BACKWARDS", QUDA_LINK_BACKWARDS)
		.value("QUDA_LINK_FORWARDS", QUDA_LINK_FORWARDS)
		.value("QUDA_LINK_BIDIRECTIONAL", QUDA_LINK_BIDIRECTIONAL)
		.export_values();

;

	// QudaFieldGeometry_s file:enum_quda.h line:499
	pybind11::enum_<QudaFieldGeometry>(enum_module, "QudaFieldGeometry")
		.value("QUDA_SCALAR_GEOMETRY", QUDA_SCALAR_GEOMETRY)
		.value("QUDA_VECTOR_GEOMETRY", QUDA_VECTOR_GEOMETRY)
		.value("QUDA_TENSOR_GEOMETRY", QUDA_TENSOR_GEOMETRY)
		.value("QUDA_COARSE_GEOMETRY", QUDA_COARSE_GEOMETRY)
		.value("QUDA_INVALID_GEOMETRY", QUDA_INVALID_GEOMETRY)
		.export_values();

;

	// QudaGhostExchange_s file:enum_quda.h line:507
	pybind11::enum_<QudaGhostExchange>(enum_module, "QudaGhostExchange")
		.value("QUDA_GHOST_EXCHANGE_NO", QUDA_GHOST_EXCHANGE_NO)
		.value("QUDA_GHOST_EXCHANGE_PAD", QUDA_GHOST_EXCHANGE_PAD)
		.value("QUDA_GHOST_EXCHANGE_EXTENDED", QUDA_GHOST_EXCHANGE_EXTENDED)
		.value("QUDA_GHOST_EXCHANGE_INVALID", QUDA_GHOST_EXCHANGE_INVALID)
		.export_values();

;

	// QudaStaggeredPhase_s file:enum_quda.h line:514
	pybind11::enum_<QudaStaggeredPhase>(enum_module, "QudaStaggeredPhase")
		.value("QUDA_STAGGERED_PHASE_NO", QUDA_STAGGERED_PHASE_NO)
		.value("QUDA_STAGGERED_PHASE_MILC", QUDA_STAGGERED_PHASE_MILC)
		.value("QUDA_STAGGERED_PHASE_CPS", QUDA_STAGGERED_PHASE_CPS)
		.value("QUDA_STAGGERED_PHASE_TIFR", QUDA_STAGGERED_PHASE_TIFR)
		.value("QUDA_STAGGERED_PHASE_INVALID", QUDA_STAGGERED_PHASE_INVALID)
		.export_values();

;

	// QudaContractType_s file:enum_quda.h line:522
	pybind11::enum_<QudaContractType>(enum_module, "QudaContractType")
		.value("QUDA_CONTRACT_TYPE_OPEN", QUDA_CONTRACT_TYPE_OPEN)
		.value("QUDA_CONTRACT_TYPE_DR", QUDA_CONTRACT_TYPE_DR)
		.value("QUDA_CONTRACT_TYPE_INVALID", QUDA_CONTRACT_TYPE_INVALID)
		.export_values();

;

	// QudaContractGamma_s file:enum_quda.h line:528
	pybind11::enum_<QudaContractGamma>(enum_module, "QudaContractGamma")
		.value("QUDA_CONTRACT_GAMMA_I", QUDA_CONTRACT_GAMMA_I)
		.value("QUDA_CONTRACT_GAMMA_G1", QUDA_CONTRACT_GAMMA_G1)
		.value("QUDA_CONTRACT_GAMMA_G2", QUDA_CONTRACT_GAMMA_G2)
		.value("QUDA_CONTRACT_GAMMA_G3", QUDA_CONTRACT_GAMMA_G3)
		.value("QUDA_CONTRACT_GAMMA_G4", QUDA_CONTRACT_GAMMA_G4)
		.value("QUDA_CONTRACT_GAMMA_G5", QUDA_CONTRACT_GAMMA_G5)
		.value("QUDA_CONTRACT_GAMMA_G1G5", QUDA_CONTRACT_GAMMA_G1G5)
		.value("QUDA_CONTRACT_GAMMA_G2G5", QUDA_CONTRACT_GAMMA_G2G5)
		.value("QUDA_CONTRACT_GAMMA_G3G5", QUDA_CONTRACT_GAMMA_G3G5)
		.value("QUDA_CONTRACT_GAMMA_G4G5", QUDA_CONTRACT_GAMMA_G4G5)
		.value("QUDA_CONTRACT_GAMMA_S12", QUDA_CONTRACT_GAMMA_S12)
		.value("QUDA_CONTRACT_GAMMA_S13", QUDA_CONTRACT_GAMMA_S13)
		.value("QUDA_CONTRACT_GAMMA_S14", QUDA_CONTRACT_GAMMA_S14)
		.value("QUDA_CONTRACT_GAMMA_S21", QUDA_CONTRACT_GAMMA_S21)
		.value("QUDA_CONTRACT_GAMMA_S23", QUDA_CONTRACT_GAMMA_S23)
		.value("QUDA_CONTRACT_GAMMA_S34", QUDA_CONTRACT_GAMMA_S34)
		.value("QUDA_CONTRACT_GAMMA_INVALID", QUDA_CONTRACT_GAMMA_INVALID)
		.export_values();

;

	// QudaWFlowType_s file:enum_quda.h line:548
	pybind11::enum_<QudaWFlowType>(enum_module, "QudaWFlowType")
		.value("QUDA_WFLOW_TYPE_WILSON", QUDA_WFLOW_TYPE_WILSON)
		.value("QUDA_WFLOW_TYPE_SYMANZIK", QUDA_WFLOW_TYPE_SYMANZIK)
		.value("QUDA_WFLOW_TYPE_INVALID", QUDA_WFLOW_TYPE_INVALID)
		.export_values();

;

	// QudaExtLibType_s file:enum_quda.h line:555
	pybind11::enum_<QudaExtLibType>(enum_module, "QudaExtLibType")
		.value("QUDA_CUSOLVE_EXTLIB", QUDA_CUSOLVE_EXTLIB)
		.value("QUDA_EIGEN_EXTLIB", QUDA_EIGEN_EXTLIB)
		.value("QUDA_MAGMA_EXTLIB", QUDA_MAGMA_EXTLIB)
		.value("QUDA_EXTLIB_INVALID", QUDA_EXTLIB_INVALID)
		.export_values();

;
}